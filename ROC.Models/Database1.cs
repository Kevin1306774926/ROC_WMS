

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "ROC_WMS\Web.config"
//     Connection String Name: "MyDbContext"
//     Connection String:      "Data Source=.;Initial Catalog=roc_wms;uid=sa;pwd=barcode"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Express Edition (64-bit)
// Database Engine Edition: Express

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace ROC.Models
{
    using System.ComponentModel.DataAnnotations;
    using System.Linq;

    #region Unit of work

    public interface IMyDbContext : System.IDisposable
    {
        System.Data.Entity.DbSet<ActionInfo> ActionInfoes { get; set; } // ActionInfo
        System.Data.Entity.DbSet<Menu> Menus { get; set; } // Menu
        System.Data.Entity.DbSet<MenuClass> MenuClasses { get; set; } // MenuClass
        System.Data.Entity.DbSet<Role> Roles { get; set; } // Role
        System.Data.Entity.DbSet<RoleActionInfo> RoleActionInfoes { get; set; } // RoleActionInfo
        System.Data.Entity.DbSet<SysDataClass> SysDataClasses { get; set; } // Sys_DataClass
        System.Data.Entity.DbSet<User> Users { get; set; } // Users
        System.Data.Entity.DbSet<UserRole> UserRoles { get; set; } // UserRole

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        // Stored Procedures
        int InitRolePermission(System.Guid? roleId);
        // InitRolePermissionAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int UploadRolePermission(System.Guid? roleId, string ids);
        // UploadRolePermissionAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class MyDbContext : System.Data.Entity.DbContext, IMyDbContext
    {
        public System.Data.Entity.DbSet<ActionInfo> ActionInfoes { get; set; } // ActionInfo
        public System.Data.Entity.DbSet<Menu> Menus { get; set; } // Menu
        public System.Data.Entity.DbSet<MenuClass> MenuClasses { get; set; } // MenuClass
        public System.Data.Entity.DbSet<Role> Roles { get; set; } // Role
        public System.Data.Entity.DbSet<RoleActionInfo> RoleActionInfoes { get; set; } // RoleActionInfo
        public System.Data.Entity.DbSet<SysDataClass> SysDataClasses { get; set; } // Sys_DataClass
        public System.Data.Entity.DbSet<User> Users { get; set; } // Users
        public System.Data.Entity.DbSet<UserRole> UserRoles { get; set; } // UserRole

        static MyDbContext()
        {
            System.Data.Entity.Database.SetInitializer<MyDbContext>(null);
        }

        public MyDbContext()
            : base("Name=MyDbContext")
        {
            InitializePartial();
        }

        public MyDbContext(string connectionString)
            : base(connectionString)
        {
            InitializePartial();
        }

        public MyDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
            InitializePartial();
        }

        public MyDbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
            InitializePartial();
        }

        public MyDbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
            InitializePartial();
        }

        protected override void Dispose(bool disposing)
        {
            DisposePartial(disposing);
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new ActionInfoConfiguration());
            modelBuilder.Configurations.Add(new MenuConfiguration());
            modelBuilder.Configurations.Add(new MenuClassConfiguration());
            modelBuilder.Configurations.Add(new RoleConfiguration());
            modelBuilder.Configurations.Add(new RoleActionInfoConfiguration());
            modelBuilder.Configurations.Add(new SysDataClassConfiguration());
            modelBuilder.Configurations.Add(new UserConfiguration());
            modelBuilder.Configurations.Add(new UserRoleConfiguration());

            OnModelCreatingPartial(modelBuilder);
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new ActionInfoConfiguration(schema));
            modelBuilder.Configurations.Add(new MenuConfiguration(schema));
            modelBuilder.Configurations.Add(new MenuClassConfiguration(schema));
            modelBuilder.Configurations.Add(new RoleConfiguration(schema));
            modelBuilder.Configurations.Add(new RoleActionInfoConfiguration(schema));
            modelBuilder.Configurations.Add(new SysDataClassConfiguration(schema));
            modelBuilder.Configurations.Add(new UserConfiguration(schema));
            modelBuilder.Configurations.Add(new UserRoleConfiguration(schema));
            return modelBuilder;
        }

        partial void InitializePartial();
        partial void DisposePartial(bool disposing);
        partial void OnModelCreatingPartial(System.Data.Entity.DbModelBuilder modelBuilder);

        // Stored Procedures
        public int InitRolePermission(System.Guid? roleId)
        {
            var roleIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RoleId", SqlDbType = System.Data.SqlDbType.UniqueIdentifier, Direction = System.Data.ParameterDirection.Input, Value = roleId.GetValueOrDefault() };
            if (!roleId.HasValue)
                roleIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[InitRolePermission] @RoleId", roleIdParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int UploadRolePermission(System.Guid? roleId, string ids)
        {
            var roleIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RoleId", SqlDbType = System.Data.SqlDbType.UniqueIdentifier, Direction = System.Data.ParameterDirection.Input, Value = roleId.GetValueOrDefault() };
            if (!roleId.HasValue)
                roleIdParam.Value = System.DBNull.Value;

            var idsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Ids", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = ids, Size = -1 };
            if (idsParam.Value == null)
                idsParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[UploadRolePermission] @RoleId, @Ids", roleIdParam, idsParam, procResultParam);

            return (int) procResultParam.Value;
        }

    }
    #endregion

    #region Database context factory

    public partial class MyDbContextFactory : System.Data.Entity.Infrastructure.IDbContextFactory<MyDbContext>
    {
        public MyDbContext Create()
        {
            return new MyDbContext();
        }
    }

    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class FakeMyDbContext : IMyDbContext
    {
        public System.Data.Entity.DbSet<ActionInfo> ActionInfoes { get; set; }
        public System.Data.Entity.DbSet<Menu> Menus { get; set; }
        public System.Data.Entity.DbSet<MenuClass> MenuClasses { get; set; }
        public System.Data.Entity.DbSet<Role> Roles { get; set; }
        public System.Data.Entity.DbSet<RoleActionInfo> RoleActionInfoes { get; set; }
        public System.Data.Entity.DbSet<SysDataClass> SysDataClasses { get; set; }
        public System.Data.Entity.DbSet<User> Users { get; set; }
        public System.Data.Entity.DbSet<UserRole> UserRoles { get; set; }

        public FakeMyDbContext()
        {
            ActionInfoes = new FakeDbSet<ActionInfo>("Id");
            Menus = new FakeDbSet<Menu>("Controller");
            MenuClasses = new FakeDbSet<MenuClass>("Id");
            Roles = new FakeDbSet<Role>("Id");
            RoleActionInfoes = new FakeDbSet<RoleActionInfo>("Id");
            SysDataClasses = new FakeDbSet<SysDataClass>("Id");
            Users = new FakeDbSet<User>("Id");
            UserRoles = new FakeDbSet<UserRole>("Id");

            InitializePartial();
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        partial void InitializePartial();

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        private System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        private System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }


        // Stored Procedures
        public int InitRolePermission(System.Guid? roleId)
        {

            return 0;
        }

        public int UploadRolePermission(System.Guid? roleId, string ids)
        {

            return 0;
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();

            InitializePartial();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();

            InitializePartial();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }

        partial void InitializePartial();
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TElement>(expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // ActionInfo
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class ActionInfo
    {

        ///<summary>
        /// Id (Primary key)
        ///</summary>
        public System.Guid Id { get; set; }

        ///<summary>
        /// Action (length: 50)
        ///</summary>
        public string Action { get; set; }

        ///<summary>
        /// ActionName (length: 50)
        ///</summary>
        public string ActionName { get; set; }

        ///<summary>
        /// Controller (length: 50)
        ///</summary>
        public string Controller { get; set; }

        ///<summary>
        /// OpTime
        ///</summary>
        public System.DateTime OpTime { get; set; }

        ///<summary>
        /// Description (length: 200)
        ///</summary>
        public string Description { get; set; }

        ///<summary>
        /// IsUsed
        ///</summary>
        public bool IsUsed { get; set; }

        ///<summary>
        /// ControllerName (length: 50)
        ///</summary>
        public string ControllerName { get; set; }

        // Reverse navigation

        /// <summary>
        /// Child RoleActionInfoes where [RoleActionInfo].[ActionId] point to this entity (FK_RoleActionInfo_ActionInfo)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<RoleActionInfo> RoleActionInfoes { get; set; } // RoleActionInfo.FK_RoleActionInfo_ActionInfo

        // Foreign keys

        /// <summary>
        /// Parent Menu pointed by [ActionInfo].([Controller]) (FK_ActionInfo_Menu)
        /// </summary>
        public virtual Menu Menu { get; set; } // FK_ActionInfo_Menu

        public ActionInfo()
        {
            Id = System.Guid.NewGuid();
            OpTime = System.DateTime.Now;
            IsUsed = true;
            RoleActionInfoes = new System.Collections.Generic.List<RoleActionInfo>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // Menu
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class Menu
    {

        ///<summary>
        /// Code (length: 50)
        ///</summary>
        public string Code { get; set; }

        ///<summary>
        /// Name (length: 50)
        ///</summary>
        public string Name { get; set; }

        ///<summary>
        /// Controller (Primary key) (length: 50)
        ///</summary>
        public string Controller { get; set; }

        ///<summary>
        /// Description (length: 100)
        ///</summary>
        public string Description { get; set; }

        ///<summary>
        /// OpTime
        ///</summary>
        public System.DateTime OpTime { get; set; }

        ///<summary>
        /// Class
        ///</summary>
        public int? Class { get; set; }

        ///<summary>
        /// Url (length: 100)
        ///</summary>
        public string Url { get; set; }

        ///<summary>
        /// IsUsed
        ///</summary>
        public bool? IsUsed { get; set; }

        // Reverse navigation

        /// <summary>
        /// Child ActionInfoes where [ActionInfo].[Controller] point to this entity (FK_ActionInfo_Menu)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ActionInfo> ActionInfoes { get; set; } // ActionInfo.FK_ActionInfo_Menu

        // Foreign keys

        /// <summary>
        /// Parent MenuClass pointed by [Menu].([Class]) (FK_Menu_MenuClass)
        /// </summary>
        public virtual MenuClass MenuClass { get; set; } // FK_Menu_MenuClass

        public Menu()
        {
            IsUsed = true;
            ActionInfoes = new System.Collections.Generic.List<ActionInfo>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // MenuClass
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class MenuClass
    {

        ///<summary>
        /// Id (Primary key)
        ///</summary>
        public int Id { get; set; }

        ///<summary>
        /// Name (length: 50)
        ///</summary>
        public string Name { get; set; }

        ///<summary>
        /// ParentId
        ///</summary>
        public int? ParentId { get; set; }

        // Reverse navigation

        /// <summary>
        /// Child Menus where [Menu].[Class] point to this entity (FK_Menu_MenuClass)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Menu> Menus { get; set; } // Menu.FK_Menu_MenuClass

        public MenuClass()
        {
            Menus = new System.Collections.Generic.List<Menu>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // Role
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class Role
    {

        ///<summary>
        /// Id (Primary key)
        ///</summary>
        public System.Guid Id { get; set; }

        ///<summary>
        /// Name (length: 50)
        ///</summary>
        public string Name { get; set; }

        ///<summary>
        /// Description (length: 100)
        ///</summary>
        public string Description { get; set; }

        ///<summary>
        /// OpTime
        ///</summary>
        public System.DateTime? OpTime { get; set; }

        ///<summary>
        /// Opration (length: 50)
        ///</summary>
        public string Opration { get; set; }

        // Reverse navigation

        /// <summary>
        /// Child RoleActionInfoes where [RoleActionInfo].[RoleId] point to this entity (FK_RoleActionInfo_Role)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<RoleActionInfo> RoleActionInfoes { get; set; } // RoleActionInfo.FK_RoleActionInfo_Role
        /// <summary>
        /// Child UserRoles where [UserRole].[RoleId] point to this entity (FK_UserRole_Role)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<UserRole> UserRoles { get; set; } // UserRole.FK_UserRole_Role

        public Role()
        {
            Id = System.Guid.NewGuid();
            UserRoles = new System.Collections.Generic.List<UserRole>();
            RoleActionInfoes = new System.Collections.Generic.List<RoleActionInfo>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // RoleActionInfo
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class RoleActionInfo
    {

        ///<summary>
        /// Id (Primary key)
        ///</summary>
        public int Id { get; set; }

        ///<summary>
        /// RoleId
        ///</summary>
        public System.Guid RoleId { get; set; }

        ///<summary>
        /// ActionId
        ///</summary>
        public System.Guid ActionId { get; set; }

        ///<summary>
        /// IsUsed
        ///</summary>
        public bool IsUsed { get; set; }

        // Foreign keys

        /// <summary>
        /// Parent ActionInfo pointed by [RoleActionInfo].([ActionId]) (FK_RoleActionInfo_ActionInfo)
        /// </summary>
        public virtual ActionInfo ActionInfo { get; set; } // FK_RoleActionInfo_ActionInfo

        /// <summary>
        /// Parent Role pointed by [RoleActionInfo].([RoleId]) (FK_RoleActionInfo_Role)
        /// </summary>
        public virtual Role Role { get; set; } // FK_RoleActionInfo_Role

        public RoleActionInfo()
        {
            IsUsed = true;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // Sys_DataClass
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class SysDataClass
    {

        ///<summary>
        /// Id (Primary key)
        ///</summary>
        public System.Guid Id { get; set; }

        ///<summary>
        /// Code (length: 100)
        ///</summary>
        public string Code { get; set; }

        ///<summary>
        /// Name (length: 50)
        ///</summary>
        public string Name { get; set; }

        ///<summary>
        /// ParentCode (length: 100)
        ///</summary>
        public string ParentCode { get; set; }

        ///<summary>
        /// TypeName (length: 50)
        ///</summary>
        public string TypeName { get; set; }

        public SysDataClass()
        {
            Id = System.Guid.NewGuid();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // Users
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class User
    {

        ///<summary>
        /// Id (Primary key)
        ///</summary>
        public System.Guid Id { get; set; }

        ///<summary>
        /// Code (length: 50). 编号
        ///</summary>
        [Display(Name="编号")]
        public string Code { get; set; }

        ///<summary>
        /// Name (length: 50). 名称
        ///</summary>
        [Display(Name="名称")]
        public string Name { get; set; }

        ///<summary>
        /// Password (length: 50). 密码
        ///</summary>
        [Display(Name="密码")]
        public string Password { get; set; }

        ///<summary>
        /// IsStop. 是否停用
        ///</summary>
        [Display(Name="是否停用")]
        public bool IsStop { get; set; }

        ///<summary>
        /// Operator (length: 50). 操作员
        ///</summary>
        [Display(Name="操作员")]
        public string Operator { get; set; }

        ///<summary>
        /// OpTime. 时间
        ///</summary>
        [Display(Name="时间")]
        public System.DateTime OpTime { get; set; }

        // Reverse navigation

        /// <summary>
        /// Child UserRoles where [UserRole].[UserId] point to this entity (FK_UserRole_User)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<UserRole> UserRoles { get; set; } // UserRole.FK_UserRole_User

        public User()
        {
            Id = System.Guid.NewGuid();
            IsStop = true;
            OpTime = System.DateTime.Now;
            UserRoles = new System.Collections.Generic.List<UserRole>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // UserRole
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class UserRole
    {

        ///<summary>
        /// Id (Primary key)
        ///</summary>
        public int Id { get; set; }

        ///<summary>
        /// UserId
        ///</summary>
        public System.Guid UserId { get; set; }

        ///<summary>
        /// RoleId
        ///</summary>
        public System.Guid RoleId { get; set; }

        // Foreign keys

        /// <summary>
        /// Parent Role pointed by [UserRole].([RoleId]) (FK_UserRole_Role)
        /// </summary>
        public virtual Role Role { get; set; } // FK_UserRole_Role

        /// <summary>
        /// Parent User pointed by [UserRole].([UserId]) (FK_UserRole_User)
        /// </summary>
        public virtual User User { get; set; } // FK_UserRole_User

        public UserRole()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    #endregion

    #region POCO Configuration

    // ActionInfo
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class ActionInfoConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ActionInfo>
    {
        public ActionInfoConfiguration()
            : this("dbo")
        {
        }

        public ActionInfoConfiguration(string schema)
        {
            ToTable("ActionInfo", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Action).HasColumnName(@"Action").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.ActionName).HasColumnName(@"ActionName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Controller).HasColumnName(@"Controller").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.OpTime).HasColumnName(@"OpTime").HasColumnType("datetime").IsRequired();
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsOptional().HasMaxLength(200);
            Property(x => x.IsUsed).HasColumnName(@"IsUsed").HasColumnType("bit").IsRequired();
            Property(x => x.ControllerName).HasColumnName(@"ControllerName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);

            // Foreign keys
            HasOptional(a => a.Menu).WithMany(b => b.ActionInfoes).HasForeignKey(c => c.Controller); // FK_ActionInfo_Menu
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // Menu
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class MenuConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Menu>
    {
        public MenuConfiguration()
            : this("dbo")
        {
        }

        public MenuConfiguration(string schema)
        {
            ToTable("Menu", schema);
            HasKey(x => x.Controller);

            Property(x => x.Code).HasColumnName(@"Code").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Controller).HasColumnName(@"Controller").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.OpTime).HasColumnName(@"OpTime").HasColumnType("datetime").IsRequired();
            Property(x => x.Class).HasColumnName(@"Class").HasColumnType("int").IsOptional();
            Property(x => x.Url).HasColumnName(@"Url").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.IsUsed).HasColumnName(@"IsUsed").HasColumnType("bit").IsOptional();

            // Foreign keys
            HasOptional(a => a.MenuClass).WithMany(b => b.Menus).HasForeignKey(c => c.Class).WillCascadeOnDelete(false); // FK_Menu_MenuClass
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // MenuClass
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class MenuClassConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MenuClass>
    {
        public MenuClassConfiguration()
            : this("dbo")
        {
        }

        public MenuClassConfiguration(string schema)
        {
            ToTable("MenuClass", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.ParentId).HasColumnName(@"ParentId").HasColumnType("int").IsOptional();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // Role
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class RoleConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Role>
    {
        public RoleConfiguration()
            : this("dbo")
        {
        }

        public RoleConfiguration(string schema)
        {
            ToTable("Role", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.OpTime).HasColumnName(@"OpTime").HasColumnType("datetime").IsOptional();
            Property(x => x.Opration).HasColumnName(@"Opration").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // RoleActionInfo
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class RoleActionInfoConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RoleActionInfo>
    {
        public RoleActionInfoConfiguration()
            : this("dbo")
        {
        }

        public RoleActionInfoConfiguration(string schema)
        {
            ToTable("RoleActionInfo", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.RoleId).HasColumnName(@"RoleId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.ActionId).HasColumnName(@"ActionId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.IsUsed).HasColumnName(@"IsUsed").HasColumnType("bit").IsRequired();

            // Foreign keys
            HasRequired(a => a.ActionInfo).WithMany(b => b.RoleActionInfoes).HasForeignKey(c => c.ActionId).WillCascadeOnDelete(false); // FK_RoleActionInfo_ActionInfo
            HasRequired(a => a.Role).WithMany(b => b.RoleActionInfoes).HasForeignKey(c => c.RoleId).WillCascadeOnDelete(false); // FK_RoleActionInfo_Role
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // Sys_DataClass
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class SysDataClassConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SysDataClass>
    {
        public SysDataClassConfiguration()
            : this("dbo")
        {
        }

        public SysDataClassConfiguration(string schema)
        {
            ToTable("Sys_DataClass", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Code).HasColumnName(@"Code").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.ParentCode).HasColumnName(@"ParentCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.TypeName).HasColumnName(@"TypeName").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // Users
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class UserConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<User>
    {
        public UserConfiguration()
            : this("dbo")
        {
        }

        public UserConfiguration(string schema)
        {
            ToTable("Users", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Code).HasColumnName(@"Code").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Password).HasColumnName(@"Password").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.IsStop).HasColumnName(@"IsStop").HasColumnType("bit").IsRequired();
            Property(x => x.Operator).HasColumnName(@"Operator").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.OpTime).HasColumnName(@"OpTime").HasColumnType("datetime").IsRequired();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // UserRole
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public partial class UserRoleConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<UserRole>
    {
        public UserRoleConfiguration()
            : this("dbo")
        {
        }

        public UserRoleConfiguration(string schema)
        {
            ToTable("UserRole", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.RoleId).HasColumnName(@"RoleId").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.Role).WithMany(b => b.UserRoles).HasForeignKey(c => c.RoleId).WillCascadeOnDelete(false); // FK_UserRole_Role
            HasRequired(a => a.User).WithMany(b => b.UserRoles).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_UserRole_User
            InitializePartial();
        }
        partial void InitializePartial();
    }

    #endregion

    #region Stored procedure return models

    #endregion

}
// </auto-generated>

